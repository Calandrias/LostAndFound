# {{ tag_name | lower }}_lambda_handler.py
"""Auto-generated Lmabda Hander for for {{ tag_name }}"""

from {{ tag_name }}_handler_impl import {{ tag_name|capitalize }}Handler

handler_instance = {{ tag_name|capitalize }}Handler()


def _extract_method_path(event):
    # REST API v1
    if "httpMethod" in event and "path" in event:
        return event["httpMethod"], event["path"]
    # HTTP API v2
    rc = event.get("requestContext", {}).get("http", {})
    method = rc.get("method")
    path = event.get("rawPath") or rc.get("path")
    return method, path

routes = {
{%- for endpoint in endpoints %}
    ("{{ endpoint.method }}", "{{ endpoint.path }}"): handler_instance.{{ endpoint.operationId | snake_case }}{% if not loop.last %},{% endif %}
{%- endfor %}
}


# Simple in-memory cache (lives as long as Lambda is warm)
cache = {}

def lambda_handler(event, context):
    method, path = _extract_method_path(event)
    key = (method, path, event.get("queryStringParameters"))
    route = routes.get((method, path))
    if route is None:
        return {"statusCode": 404, "body": "Endpoint not found"}
  
    return response
{{ '\n' -}}
