from aws_cdk.aws_lambda import Function, Runtime, Code, LayerVersion, Duration
from aws_cdk.aws_apigatewayv2 import HttpApi, HttpMethod
from aws_cdk.aws_apigatewayv2_integrations import HttpLambdaIntegration
from typing import Any

def create_all_lambdas(
    scope: Any,
    resources_bag: Any,
) -> dict:
    lambdas = {}
    {% for lambda in lambdas %}
    env = lambda.env if hasattr(lambda, 'env') else {}
    fn = Function(
        scope,
        id="{{ lambda.name|capitalize }}Function",
        function_name="{{ lambda.name|capitalize }}Function",
        runtime=Runtime.{{ lambda.runtime or generic.runtime }},
        code=Code.from_asset(str({{lambda.asset_path}}.joinpath("{{ lambda.name }}").resolve())),
        handler="{{ lambda.handler }}",
        environment=env,
        layers=[shared_layer],
        memory_size={{ lambda.memory_size or generic.memory_size }},
        timeout=Duration.seconds({{ lambda.timeout or generic.timeout }}),
    )
    {% for perm in lambda.permissions %}
    resources_bag.{{ perm.table }}.grant_{{ perm.access }}_data(fn)
    {% endfor %}

    owner_proxy = api.root.add_resource("owner").add_resource("{proxy+}")
    {% for method in lambda.methods %}
    http_api.add_routes(
        path="{{ lambda.api_path }}",
        methods=[HttpMethod.{{ method }}],
        integration=HttpLambdaIntegration("{{ lambda.name }}{{ method }}Integration", fn)
    )
    {% endfor %}
    lambdas["{{ lambda.name }}"] = fn
    {% endfor %}
    return lambdas
