============================= test session starts ==============================
platform linux -- Python 3.12.11, pytest-8.4.2, pluggy-1.6.0
rootdir: /home/roland/LostAndFound
configfile: pytest.ini
plugins: typeguard-2.13.3, cov-7.0.0
collected 25 items

runtime/tests/shared/test_owner_store.py ..FFFFFFFFFFFFFFFFFFFFF..
ERROR: Coverage failure: total of 57 is less than fail-under=90
                                                                         [100%]

=================================== FAILURES ===================================
______________ test_invalid_owner_fields[owner_hash-owner_short] _______________

field = 'owner_hash', invalid_value = 'owner_short'

    @pytest.mark.parametrize(
        "field,invalid_value",
        [
            ("owner_hash", "owner_short"),  # too short
            ("owner_hash", "ownr_" + "A" * 43),  # wrong prefix
            ("salt", "B" * 10),  # too short
            ("salt", "invalid salt!"),  # invalid chars
            ("password_hash", "short"),  # too short
            ("password_hash", "notvalid$2a$pattern"),  # wrong pattern
            ("public_key", "no_key_headers"),  # missing PEM format
            ("random_entropy", "Z" * 31),  # too short
            ("random_entropy", "Y" * 65),  # too long
            ("random_entropy", "abc!@#"),  # invalid chars
            ("owner_encrypted_storage", "!@#$"),  # not base64
            ("created_at", -1),  # negative timestamp
            ("status", "not-a-status"),  # invalid enum member
        ])
    def test_invalid_owner_fields(field, invalid_value):
        data = valid_owner_dict()
        data[field] = invalid_value
        with pytest.raises(ValidationError):
>           Owner(**data)
            ^^^^^
E           NameError: name 'Owner' is not defined

runtime/tests/shared/test_owner_store.py:121: NameError
_ test_invalid_owner_fields[owner_hash-ownr_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA] _

field = 'owner_hash'
invalid_value = 'ownr_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'

    @pytest.mark.parametrize(
        "field,invalid_value",
        [
            ("owner_hash", "owner_short"),  # too short
            ("owner_hash", "ownr_" + "A" * 43),  # wrong prefix
            ("salt", "B" * 10),  # too short
            ("salt", "invalid salt!"),  # invalid chars
            ("password_hash", "short"),  # too short
            ("password_hash", "notvalid$2a$pattern"),  # wrong pattern
            ("public_key", "no_key_headers"),  # missing PEM format
            ("random_entropy", "Z" * 31),  # too short
            ("random_entropy", "Y" * 65),  # too long
            ("random_entropy", "abc!@#"),  # invalid chars
            ("owner_encrypted_storage", "!@#$"),  # not base64
            ("created_at", -1),  # negative timestamp
            ("status", "not-a-status"),  # invalid enum member
        ])
    def test_invalid_owner_fields(field, invalid_value):
        data = valid_owner_dict()
        data[field] = invalid_value
        with pytest.raises(ValidationError):
>           Owner(**data)
            ^^^^^
E           NameError: name 'Owner' is not defined

runtime/tests/shared/test_owner_store.py:121: NameError
__________________ test_invalid_owner_fields[salt-BBBBBBBBBB] __________________

field = 'salt', invalid_value = 'BBBBBBBBBB'

    @pytest.mark.parametrize(
        "field,invalid_value",
        [
            ("owner_hash", "owner_short"),  # too short
            ("owner_hash", "ownr_" + "A" * 43),  # wrong prefix
            ("salt", "B" * 10),  # too short
            ("salt", "invalid salt!"),  # invalid chars
            ("password_hash", "short"),  # too short
            ("password_hash", "notvalid$2a$pattern"),  # wrong pattern
            ("public_key", "no_key_headers"),  # missing PEM format
            ("random_entropy", "Z" * 31),  # too short
            ("random_entropy", "Y" * 65),  # too long
            ("random_entropy", "abc!@#"),  # invalid chars
            ("owner_encrypted_storage", "!@#$"),  # not base64
            ("created_at", -1),  # negative timestamp
            ("status", "not-a-status"),  # invalid enum member
        ])
    def test_invalid_owner_fields(field, invalid_value):
        data = valid_owner_dict()
        data[field] = invalid_value
        with pytest.raises(ValidationError):
>           Owner(**data)
            ^^^^^
E           NameError: name 'Owner' is not defined

runtime/tests/shared/test_owner_store.py:121: NameError
________________ test_invalid_owner_fields[salt-invalid salt!] _________________

field = 'salt', invalid_value = 'invalid salt!'

    @pytest.mark.parametrize(
        "field,invalid_value",
        [
            ("owner_hash", "owner_short"),  # too short
            ("owner_hash", "ownr_" + "A" * 43),  # wrong prefix
            ("salt", "B" * 10),  # too short
            ("salt", "invalid salt!"),  # invalid chars
            ("password_hash", "short"),  # too short
            ("password_hash", "notvalid$2a$pattern"),  # wrong pattern
            ("public_key", "no_key_headers"),  # missing PEM format
            ("random_entropy", "Z" * 31),  # too short
            ("random_entropy", "Y" * 65),  # too long
            ("random_entropy", "abc!@#"),  # invalid chars
            ("owner_encrypted_storage", "!@#$"),  # not base64
            ("created_at", -1),  # negative timestamp
            ("status", "not-a-status"),  # invalid enum member
        ])
    def test_invalid_owner_fields(field, invalid_value):
        data = valid_owner_dict()
        data[field] = invalid_value
        with pytest.raises(ValidationError):
>           Owner(**data)
            ^^^^^
E           NameError: name 'Owner' is not defined

runtime/tests/shared/test_owner_store.py:121: NameError
________________ test_invalid_owner_fields[password_hash-short] ________________

field = 'password_hash', invalid_value = 'short'

    @pytest.mark.parametrize(
        "field,invalid_value",
        [
            ("owner_hash", "owner_short"),  # too short
            ("owner_hash", "ownr_" + "A" * 43),  # wrong prefix
            ("salt", "B" * 10),  # too short
            ("salt", "invalid salt!"),  # invalid chars
            ("password_hash", "short"),  # too short
            ("password_hash", "notvalid$2a$pattern"),  # wrong pattern
            ("public_key", "no_key_headers"),  # missing PEM format
            ("random_entropy", "Z" * 31),  # too short
            ("random_entropy", "Y" * 65),  # too long
            ("random_entropy", "abc!@#"),  # invalid chars
            ("owner_encrypted_storage", "!@#$"),  # not base64
            ("created_at", -1),  # negative timestamp
            ("status", "not-a-status"),  # invalid enum member
        ])
    def test_invalid_owner_fields(field, invalid_value):
        data = valid_owner_dict()
        data[field] = invalid_value
        with pytest.raises(ValidationError):
>           Owner(**data)
            ^^^^^
E           NameError: name 'Owner' is not defined

runtime/tests/shared/test_owner_store.py:121: NameError
_________ test_invalid_owner_fields[password_hash-notvalid$2a$pattern] _________

field = 'password_hash', invalid_value = 'notvalid$2a$pattern'

    @pytest.mark.parametrize(
        "field,invalid_value",
        [
            ("owner_hash", "owner_short"),  # too short
            ("owner_hash", "ownr_" + "A" * 43),  # wrong prefix
            ("salt", "B" * 10),  # too short
            ("salt", "invalid salt!"),  # invalid chars
            ("password_hash", "short"),  # too short
            ("password_hash", "notvalid$2a$pattern"),  # wrong pattern
            ("public_key", "no_key_headers"),  # missing PEM format
            ("random_entropy", "Z" * 31),  # too short
            ("random_entropy", "Y" * 65),  # too long
            ("random_entropy", "abc!@#"),  # invalid chars
            ("owner_encrypted_storage", "!@#$"),  # not base64
            ("created_at", -1),  # negative timestamp
            ("status", "not-a-status"),  # invalid enum member
        ])
    def test_invalid_owner_fields(field, invalid_value):
        data = valid_owner_dict()
        data[field] = invalid_value
        with pytest.raises(ValidationError):
>           Owner(**data)
            ^^^^^
E           NameError: name 'Owner' is not defined

runtime/tests/shared/test_owner_store.py:121: NameError
_____________ test_invalid_owner_fields[public_key-no_key_headers] _____________

field = 'public_key', invalid_value = 'no_key_headers'

    @pytest.mark.parametrize(
        "field,invalid_value",
        [
            ("owner_hash", "owner_short"),  # too short
            ("owner_hash", "ownr_" + "A" * 43),  # wrong prefix
            ("salt", "B" * 10),  # too short
            ("salt", "invalid salt!"),  # invalid chars
            ("password_hash", "short"),  # too short
            ("password_hash", "notvalid$2a$pattern"),  # wrong pattern
            ("public_key", "no_key_headers"),  # missing PEM format
            ("random_entropy", "Z" * 31),  # too short
            ("random_entropy", "Y" * 65),  # too long
            ("random_entropy", "abc!@#"),  # invalid chars
            ("owner_encrypted_storage", "!@#$"),  # not base64
            ("created_at", -1),  # negative timestamp
            ("status", "not-a-status"),  # invalid enum member
        ])
    def test_invalid_owner_fields(field, invalid_value):
        data = valid_owner_dict()
        data[field] = invalid_value
        with pytest.raises(ValidationError):
>           Owner(**data)
            ^^^^^
E           NameError: name 'Owner' is not defined

runtime/tests/shared/test_owner_store.py:121: NameError
__ test_invalid_owner_fields[random_entropy-ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ] ___

field = 'random_entropy', invalid_value = 'ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ'

    @pytest.mark.parametrize(
        "field,invalid_value",
        [
            ("owner_hash", "owner_short"),  # too short
            ("owner_hash", "ownr_" + "A" * 43),  # wrong prefix
            ("salt", "B" * 10),  # too short
            ("salt", "invalid salt!"),  # invalid chars
            ("password_hash", "short"),  # too short
            ("password_hash", "notvalid$2a$pattern"),  # wrong pattern
            ("public_key", "no_key_headers"),  # missing PEM format
            ("random_entropy", "Z" * 31),  # too short
            ("random_entropy", "Y" * 65),  # too long
            ("random_entropy", "abc!@#"),  # invalid chars
            ("owner_encrypted_storage", "!@#$"),  # not base64
            ("created_at", -1),  # negative timestamp
            ("status", "not-a-status"),  # invalid enum member
        ])
    def test_invalid_owner_fields(field, invalid_value):
        data = valid_owner_dict()
        data[field] = invalid_value
        with pytest.raises(ValidationError):
>           Owner(**data)
            ^^^^^
E           NameError: name 'Owner' is not defined

runtime/tests/shared/test_owner_store.py:121: NameError
_ test_invalid_owner_fields[random_entropy-YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY] _

field = 'random_entropy'
invalid_value = 'YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY'

    @pytest.mark.parametrize(
        "field,invalid_value",
        [
            ("owner_hash", "owner_short"),  # too short
            ("owner_hash", "ownr_" + "A" * 43),  # wrong prefix
            ("salt", "B" * 10),  # too short
            ("salt", "invalid salt!"),  # invalid chars
            ("password_hash", "short"),  # too short
            ("password_hash", "notvalid$2a$pattern"),  # wrong pattern
            ("public_key", "no_key_headers"),  # missing PEM format
            ("random_entropy", "Z" * 31),  # too short
            ("random_entropy", "Y" * 65),  # too long
            ("random_entropy", "abc!@#"),  # invalid chars
            ("owner_encrypted_storage", "!@#$"),  # not base64
            ("created_at", -1),  # negative timestamp
            ("status", "not-a-status"),  # invalid enum member
        ])
    def test_invalid_owner_fields(field, invalid_value):
        data = valid_owner_dict()
        data[field] = invalid_value
        with pytest.raises(ValidationError):
>           Owner(**data)
            ^^^^^
E           NameError: name 'Owner' is not defined

runtime/tests/shared/test_owner_store.py:121: NameError
_______________ test_invalid_owner_fields[random_entropy-abc!@#] _______________

field = 'random_entropy', invalid_value = 'abc!@#'

    @pytest.mark.parametrize(
        "field,invalid_value",
        [
            ("owner_hash", "owner_short"),  # too short
            ("owner_hash", "ownr_" + "A" * 43),  # wrong prefix
            ("salt", "B" * 10),  # too short
            ("salt", "invalid salt!"),  # invalid chars
            ("password_hash", "short"),  # too short
            ("password_hash", "notvalid$2a$pattern"),  # wrong pattern
            ("public_key", "no_key_headers"),  # missing PEM format
            ("random_entropy", "Z" * 31),  # too short
            ("random_entropy", "Y" * 65),  # too long
            ("random_entropy", "abc!@#"),  # invalid chars
            ("owner_encrypted_storage", "!@#$"),  # not base64
            ("created_at", -1),  # negative timestamp
            ("status", "not-a-status"),  # invalid enum member
        ])
    def test_invalid_owner_fields(field, invalid_value):
        data = valid_owner_dict()
        data[field] = invalid_value
        with pytest.raises(ValidationError):
>           Owner(**data)
            ^^^^^
E           NameError: name 'Owner' is not defined

runtime/tests/shared/test_owner_store.py:121: NameError
___________ test_invalid_owner_fields[owner_encrypted_storage-!@#$] ____________

field = 'owner_encrypted_storage', invalid_value = '!@#$'

    @pytest.mark.parametrize(
        "field,invalid_value",
        [
            ("owner_hash", "owner_short"),  # too short
            ("owner_hash", "ownr_" + "A" * 43),  # wrong prefix
            ("salt", "B" * 10),  # too short
            ("salt", "invalid salt!"),  # invalid chars
            ("password_hash", "short"),  # too short
            ("password_hash", "notvalid$2a$pattern"),  # wrong pattern
            ("public_key", "no_key_headers"),  # missing PEM format
            ("random_entropy", "Z" * 31),  # too short
            ("random_entropy", "Y" * 65),  # too long
            ("random_entropy", "abc!@#"),  # invalid chars
            ("owner_encrypted_storage", "!@#$"),  # not base64
            ("created_at", -1),  # negative timestamp
            ("status", "not-a-status"),  # invalid enum member
        ])
    def test_invalid_owner_fields(field, invalid_value):
        data = valid_owner_dict()
        data[field] = invalid_value
        with pytest.raises(ValidationError):
>           Owner(**data)
            ^^^^^
E           NameError: name 'Owner' is not defined

runtime/tests/shared/test_owner_store.py:121: NameError
___________________ test_invalid_owner_fields[created_at--1] ___________________

field = 'created_at', invalid_value = -1

    @pytest.mark.parametrize(
        "field,invalid_value",
        [
            ("owner_hash", "owner_short"),  # too short
            ("owner_hash", "ownr_" + "A" * 43),  # wrong prefix
            ("salt", "B" * 10),  # too short
            ("salt", "invalid salt!"),  # invalid chars
            ("password_hash", "short"),  # too short
            ("password_hash", "notvalid$2a$pattern"),  # wrong pattern
            ("public_key", "no_key_headers"),  # missing PEM format
            ("random_entropy", "Z" * 31),  # too short
            ("random_entropy", "Y" * 65),  # too long
            ("random_entropy", "abc!@#"),  # invalid chars
            ("owner_encrypted_storage", "!@#$"),  # not base64
            ("created_at", -1),  # negative timestamp
            ("status", "not-a-status"),  # invalid enum member
        ])
    def test_invalid_owner_fields(field, invalid_value):
        data = valid_owner_dict()
        data[field] = invalid_value
        with pytest.raises(ValidationError):
>           Owner(**data)
            ^^^^^
E           NameError: name 'Owner' is not defined

runtime/tests/shared/test_owner_store.py:121: NameError
________________ test_invalid_owner_fields[status-not-a-status] ________________

field = 'status', invalid_value = 'not-a-status'

    @pytest.mark.parametrize(
        "field,invalid_value",
        [
            ("owner_hash", "owner_short"),  # too short
            ("owner_hash", "ownr_" + "A" * 43),  # wrong prefix
            ("salt", "B" * 10),  # too short
            ("salt", "invalid salt!"),  # invalid chars
            ("password_hash", "short"),  # too short
            ("password_hash", "notvalid$2a$pattern"),  # wrong pattern
            ("public_key", "no_key_headers"),  # missing PEM format
            ("random_entropy", "Z" * 31),  # too short
            ("random_entropy", "Y" * 65),  # too long
            ("random_entropy", "abc!@#"),  # invalid chars
            ("owner_encrypted_storage", "!@#$"),  # not base64
            ("created_at", -1),  # negative timestamp
            ("status", "not-a-status"),  # invalid enum member
        ])
    def test_invalid_owner_fields(field, invalid_value):
        data = valid_owner_dict()
        data[field] = invalid_value
        with pytest.raises(ValidationError):
>           Owner(**data)
            ^^^^^
E           NameError: name 'Owner' is not defined

runtime/tests/shared/test_owner_store.py:121: NameError
_________________________ test_missing_required_fields _________________________

    def test_missing_required_fields():
        data = valid_owner_dict()
        for f in data.keys():
            d = dict(data)
            d.pop(f)
            with pytest.raises(ValidationError):
>               Owner(**d)
                ^^^^^
E               NameError: name 'Owner' is not defined

runtime/tests/shared/test_owner_store.py:130: NameError
____________________ test_ownerhelper_validate_owner_valid _____________________

    def test_ownerhelper_validate_owner_valid():
>       owner = Owner(**valid_owner_dict())
                ^^^^^
E       NameError: name 'Owner' is not defined

runtime/tests/shared/test_owner_store.py:134: NameError
___________________ test_ownerhelper_validate_owner_invalid ____________________

    def test_ownerhelper_validate_owner_invalid():
>       owner = Owner(**valid_owner_dict())
                ^^^^^
E       NameError: name 'Owner' is not defined

runtime/tests/shared/test_owner_store.py:139: NameError
______________ test_ownerhelper_validate_field_valid_and_invalid _______________

    def test_ownerhelper_validate_field_valid_and_invalid():
>       assert OwnerHelper.validate_field("owner_hash", "owner_" + "A" * 43)
E       AssertionError: assert False
E        +  where False = <function OwnerHelper.validate_field at 0x71edeca08220>('owner_hash', ('owner_' + ('A' * 43)))
E        +    where <function OwnerHelper.validate_field at 0x71edeca08220> = OwnerHelper.validate_field

runtime/tests/shared/test_owner_store.py:145: AssertionError
----------------------------- Captured stderr call -----------------------------
Owner field validation error: owner_hash
________________________ test_ownerhelper_status_checks ________________________

    def test_ownerhelper_status_checks():
>       owner = Owner(**valid_owner_dict())
                ^^^^^
E       NameError: name 'Owner' is not defined

runtime/tests/shared/test_owner_store.py:152: NameError
__________________ test_update_owner_field_with_illegal_field __________________

ddb_table = dynamodb.ServiceResource()

    def test_update_owner_field_with_illegal_field(ddb_table):
        store = OwnerStore(ddb_resource=ddb_table)
        owner = make_owner()
        store.put_owner(owner)
        with pytest.raises(ValidationError):
>           store.update_owner_field(owner.owner_hash, "illegal_field", "value")

runtime/tests/shared/test_owner_store.py:165: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <runtime.shared.owner_store.OwnerStore object at 0x71edec0f1eb0>
owner_hash = 'owner_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'
field = 'illegal_field', value = 'value'

    def update_owner_field(self, owner_hash: str, field: str, value: Any):
        """Update a single field for an existing owner."""
        if field not in Owner.ALLOWED_UPDATE_FIELDS:
>           raise ValidationError(f"field >{field}< not part of Owner")
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E           TypeError: ValidationError.__new__() missing 1 required positional argument: 'line_errors'

runtime/shared/owner_store.py:158: TypeError
__________________ test_update_owner_field_with_invalid_value __________________

self = <runtime.shared.owner_store.OwnerStore object at 0x71edea7a82c0>
owner_hash = 'owner_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'
field = 'status', value = 'none'

    def update_owner_field(self, owner_hash: str, field: str, value: Any):
        """Update a single field for an existing owner."""
        if field not in Owner.ALLOWED_UPDATE_FIELDS:
            raise ValidationError(f"field >{field}< not part of Owner")
    
        field_info = Owner.model_fields[field]  # pylint: disable=E1136 # Owner.model_fields is dict and subscripting is safe
        field_type = field_info.annotation
    
        temp_model = create_model("TempModel", **{field: (field_type, ...)})
        try:
>           temp_model.model_validate({field: value})
E           pydantic_core._pydantic_core.ValidationError: 1 validation error for TempModel
E           status
E             Input should be 'active', 'blocked', 'onboarding' or 'in_deletion' [type=enum, input_value='none', input_type=str]
E               For further information visit https://errors.pydantic.dev/2.11/v/enum

runtime/shared/owner_store.py:165: ValidationError

During handling of the above exception, another exception occurred:

ddb_table = dynamodb.ServiceResource()

    def test_update_owner_field_with_invalid_value(ddb_table):
        store = OwnerStore(ddb_resource=ddb_table)
        owner = make_owner()
        store.put_owner(owner)
        with pytest.raises(ValidationError):
            # status must be enum; "none" is not valid
>           store.update_owner_field(owner.owner_hash, "status", "none")

runtime/tests/shared/test_owner_store.py:174: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <runtime.shared.owner_store.OwnerStore object at 0x71edea7a82c0>
owner_hash = 'owner_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'
field = 'status', value = 'none'

    def update_owner_field(self, owner_hash: str, field: str, value: Any):
        """Update a single field for an existing owner."""
        if field not in Owner.ALLOWED_UPDATE_FIELDS:
            raise ValidationError(f"field >{field}< not part of Owner")
    
        field_info = Owner.model_fields[field]  # pylint: disable=E1136 # Owner.model_fields is dict and subscripting is safe
        field_type = field_info.annotation
    
        temp_model = create_model("TempModel", **{field: (field_type, ...)})
        try:
            temp_model.model_validate({field: value})
        except ValidationError as e:
>           raise ValidationError(f"invalid value for field {field}") from e
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E           TypeError: ValidationError.__new__() missing 1 required positional argument: 'line_errors'

runtime/shared/owner_store.py:167: TypeError
_________________ test_update_owner_fields_with_multiple_keys __________________

ddb_table = dynamodb.ServiceResource()

    def test_update_owner_fields_with_multiple_keys(ddb_table):
        store = OwnerStore(ddb_resource=ddb_table)
        owner = make_owner()
        store.put_owner(owner)
        updates = {"status": "active", "random_entropy": "F" * 32}
>       resp = store.update_owner_fields(owner.owner_hash, updates)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

runtime/tests/shared/test_owner_store.py:182: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
runtime/shared/owner_store.py:186: in update_owner_fields
    resp = self.table.update_item(Key={"owner_hash": owner_hash}, UpdateExpression=expr, ExpressionAttributeValues=attrs, ReturnValues="UPDATED_NEW")
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../.local/lib/python3.12/site-packages/boto3/resources/factory.py:581: in do_action
    response = action(self, *args, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../.local/lib/python3.12/site-packages/boto3/resources/action.py:88: in __call__
    response = getattr(parent.meta.client, operation_name)(*args, **params)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../.local/lib/python3.12/site-packages/botocore/client.py:602: in _api_call
    return self._make_api_call(operation_name, kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../.local/lib/python3.12/site-packages/botocore/context.py:123: in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.client.DynamoDB object at 0x71edec2c7e90>
operation_name = 'UpdateItem'
api_params = {'ExpressionAttributeValues': {':random_entropy': {'S': 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'}, ':status': {'S': 'active'..._AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'}}, 'ReturnValues': 'UPDATED_NEW', 'TableName': 'LostAndFound-Owner', ...}

    @with_current_context()
    def _make_api_call(self, operation_name, api_params):
        operation_model = self._service_model.operation_model(operation_name)
        service_name = self._service_model.service_name
        history_recorder.record(
            'API_CALL',
            {
                'service': service_name,
                'operation': operation_name,
                'params': api_params,
            },
        )
        if operation_model.deprecated:
            logger.debug(
                'Warning: %s.%s() is deprecated', service_name, operation_name
            )
        request_context = {
            'client_region': self.meta.region_name,
            'client_config': self.meta.config,
            'has_streaming_input': operation_model.has_streaming_input,
            'auth_type': operation_model.resolved_auth_type,
            'unsigned_payload': operation_model.unsigned_payload,
            'auth_options': self._service_model.metadata.get('auth'),
        }
    
        api_params = self._emit_api_params(
            api_params=api_params,
            operation_model=operation_model,
            context=request_context,
        )
        (
            endpoint_url,
            additional_headers,
            properties,
        ) = self._resolve_endpoint_ruleset(
            operation_model, api_params, request_context
        )
        if properties:
            # Pass arbitrary endpoint info with the Request
            # for use during construction.
            request_context['endpoint_properties'] = properties
        request_dict = self._convert_to_request_dict(
            api_params=api_params,
            operation_model=operation_model,
            endpoint_url=endpoint_url,
            context=request_context,
            headers=additional_headers,
        )
        resolve_checksum_context(request_dict, operation_model, api_params)
    
        service_id = self._service_model.service_id.hyphenize()
        handler, event_response = self.meta.events.emit_until_response(
            f'before-call.{service_id}.{operation_name}',
            model=operation_model,
            params=request_dict,
            request_signer=self._request_signer,
            context=request_context,
        )
    
        if event_response is not None:
            http, parsed_response = event_response
        else:
            maybe_compress_request(
                self.meta.config, request_dict, operation_model
            )
            apply_request_checksum(request_dict)
            http, parsed_response = self._make_request(
                operation_model, request_dict, request_context
            )
    
        self.meta.events.emit(
            f'after-call.{service_id}.{operation_name}',
            http_response=http,
            parsed=parsed_response,
            model=operation_model,
            context=request_context,
        )
    
        if http.status_code >= 300:
            error_info = parsed_response.get("Error", {})
            error_code = request_context.get(
                'error_code_override'
            ) or error_info.get("Code")
            error_class = self.exceptions.from_code(error_code)
>           raise error_class(parsed_response, operation_name)
E           botocore.exceptions.ClientError: An error occurred (ValidationException) when calling the UpdateItem operation: Invalid UpdateExpression: Attribute name is a reserved keyword; reserved keyword: status

../.local/lib/python3.12/site-packages/botocore/client.py:1078: ClientError
----------------------------- Captured stderr call -----------------------------
u>len=19<s error: An error occurred (V>len=19<n) when calling the UpdateItem operation: Invalid U>len=16<n: Attribute name is a reserved keyword; reserved keyword: status
=============================== warnings summary ===============================
../../../usr/lib/python3/dist-packages/dateutil/tz/tz.py:37
  /usr/lib/python3/dist-packages/dateutil/tz/tz.py:37: DeprecationWarning: datetime.datetime.utcfromtimestamp() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.fromtimestamp(timestamp, datetime.UTC).
    EPOCH = datetime.datetime.utcfromtimestamp(0)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
================================ tests coverage ================================
_______________ coverage: platform linux, python 3.12.11-final-0 _______________

Name                                       Stmts   Miss  Cover
--------------------------------------------------------------
runtime/__init__.py                            0      0   100%
runtime/shared/__init__.py                     0      0   100%
runtime/shared/identifier_model.py            18     11    39%
runtime/shared/logging_utils.py               61     11    82%
runtime/shared/owner_model.py                 20      0   100%
runtime/shared/owner_store.py                124     45    64%
runtime/shared/response_model.py              11     11     0%
runtime/shared/session_model.py               15     15     0%
runtime/shared/session_store.py               82     82     0%
runtime/shared/shared_helper.py               22      8    64%
runtime/tests/shared/test_owner_store.py     108     17    84%
--------------------------------------------------------------
TOTAL                                        461    200    57%
Coverage HTML written to dir htmlcov
FAIL Required test coverage of 90% not reached. Total coverage: 56.62%
=========================== short test summary info ============================
FAILED runtime/tests/shared/test_owner_store.py::test_invalid_owner_fields[owner_hash-owner_short]
FAILED runtime/tests/shared/test_owner_store.py::test_invalid_owner_fields[owner_hash-ownr_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA]
FAILED runtime/tests/shared/test_owner_store.py::test_invalid_owner_fields[salt-BBBBBBBBBB]
FAILED runtime/tests/shared/test_owner_store.py::test_invalid_owner_fields[salt-invalid salt!]
FAILED runtime/tests/shared/test_owner_store.py::test_invalid_owner_fields[password_hash-short]
FAILED runtime/tests/shared/test_owner_store.py::test_invalid_owner_fields[password_hash-notvalid$2a$pattern]
FAILED runtime/tests/shared/test_owner_store.py::test_invalid_owner_fields[public_key-no_key_headers]
FAILED runtime/tests/shared/test_owner_store.py::test_invalid_owner_fields[random_entropy-ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ]
FAILED runtime/tests/shared/test_owner_store.py::test_invalid_owner_fields[random_entropy-YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY]
FAILED runtime/tests/shared/test_owner_store.py::test_invalid_owner_fields[random_entropy-abc!@#]
FAILED runtime/tests/shared/test_owner_store.py::test_invalid_owner_fields[owner_encrypted_storage-!@#$]
FAILED runtime/tests/shared/test_owner_store.py::test_invalid_owner_fields[created_at--1]
FAILED runtime/tests/shared/test_owner_store.py::test_invalid_owner_fields[status-not-a-status]
FAILED runtime/tests/shared/test_owner_store.py::test_missing_required_fields
FAILED runtime/tests/shared/test_owner_store.py::test_ownerhelper_validate_owner_valid
FAILED runtime/tests/shared/test_owner_store.py::test_ownerhelper_validate_owner_invalid
FAILED runtime/tests/shared/test_owner_store.py::test_ownerhelper_validate_field_valid_and_invalid
FAILED runtime/tests/shared/test_owner_store.py::test_ownerhelper_status_checks
FAILED runtime/tests/shared/test_owner_store.py::test_update_owner_field_with_illegal_field
FAILED runtime/tests/shared/test_owner_store.py::test_update_owner_field_with_invalid_value
FAILED runtime/tests/shared/test_owner_store.py::test_update_owner_fields_with_multiple_keys
=================== 21 failed, 4 passed, 1 warning in 4.35s ====================
